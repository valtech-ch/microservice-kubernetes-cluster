networks:
  services:
    name: cluster

volumes:
  filestorage:
  persistence:

services:
  proxy:
    image: nginx
    container_name: proxy
    networks:
      - services
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:3000"]
    ports:
     - 3000:3000
    volumes:
     - ./nginx.default.conf:/etc/nginx/conf.d/default.conf

  frontend:
    image: vtchk8sblueprintrg.azurecr.io/microservice-kubernetes-cluster/frontend:latest
    container_name: frontend
    networks:
      - services
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost"]

  filestorage:
    image: vtchk8sblueprintrg.azurecr.io/microservice-kubernetes-cluster/file-storage:latest
    container_name: filestorage
    depends_on:
      functions:
        condition: service_healthy
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - services
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - GRPC_CLIENT_PERSISTENCE_ADDRESS=dns:///persistence:9090
      - SERVER_SERVLET_CONTEXT_PATH=/filestorage
      - APPLICATION_HOSTNAME=http://localhost:3000
      - APPLICATION_UPLOAD_PATH=/etc/file-storage/uploads/
      - APPLICATION_PERSISTENCE_URL=http://persistence:8081/api/v1/messages
      - APPLICATION_FUNCTIONS_URL=http://functions/api
      - APPLICATION_FUNCTIONS_KEY=test
      - APPLICATION_KAFKA_BOOTSTRAPADDRESS=kafka:9092
      - OTEL_JAVAAGENT_ENABLED=false
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/filestorage/actuator/health || exit 1"]
    ports:
     - 8080:8080
    volumes:
      - filestorage:/etc/file-storage/uploads

  persistence:
    image: vtchk8sblueprintrg.azurecr.io/microservice-kubernetes-cluster/persistence:latest
    container_name: persistence
    depends_on:
      mariadb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - services
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SERVER_SERVLET_CONTEXT_PATH=/persistence
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/messaging
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.mariadb.jdbc.Driver
      - SPRING_H2_CONSOLE_ENABLED=false
      - SPRING_FLYWAY_LOCATIONS=classpath:db/migration/mariadb
      - APPLICATION_KAFKA_BOOTSTRAPADDRESS=kafka:9092
      - OTEL_JAVAAGENT_ENABLED=false
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8081/persistence/actuator/health || exit 1"]
    ports:
     - 8081:8081

  functions:
    image: vtchk8sblueprintrg.azurecr.io/microservice-kubernetes-cluster/functions:latest
    container_name: functions
    networks:
      - services
    environment:
      - AzureWebJobsSecretStorageType=files
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost"]
    ports:
      - 8088:80
    volumes:
      - ./host.json:/azure-functions-host/Secrets/host.json

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    networks:
      - services
    depends_on:
      mariadb:
        condition: service_healthy
    environment:
      DB_VENDOR: mariadb
      DB_ADDR: mariadb
      DB_DATABASE: keycloak
      DB_USER: root
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      PROXY_ADDRESS_FORWARDING: 'true'
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/auth/realms/cluster"]
    ports:
      - 8180:8080
    command: ["-b", "0.0.0.0", "-Dkeycloak.migration.action=import", "-Dkeycloak.migration.provider=dir", "-Dkeycloak.migration.dir=/opt/jboss/keycloak/realm-config", "-Dkeycloak.migration.strategy=OVERWRITE_EXISTING"]
    volumes:
      - ./realm-config:/opt/jboss/keycloak/realm-config

  mariadb:
    image: library/mariadb:10.11
    container_name: mariadb
    restart: always
    networks:
      - services
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=messaging
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--silent"]
    volumes:
      - persistence:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    networks:
      - services
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    networks:
      - services
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "9092"]
