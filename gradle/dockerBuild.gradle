apply plugin: "com.google.cloud.tools.jib"

ext {
  if (!project.hasProperty("imageName")) {
    throw new GradleException('imageName not set')
  }
}

tasks.register('downloadOpentelemetryAgent') {
  def agentDir = new File(buildscript.sourceFile.parentFile.parentFile, 'agent')
  mkdir agentDir
  def lockFile = new File(agentDir, "opentelemetry-javaagent-all.lock")
  doFirst {
    if (!lockFile.exists()) {
      lockFile.text = "adf"
    } else {
      while (lockFile.exists()) {
        Thread.sleep(100)
      }
    }
  }
  doLast {
    println('Check OpenTelemetry agent')
    def opentelemetryAgent = new File(agentDir, 'opentelemetry-javaagent-all.jar')
    if (!opentelemetryAgent.exists()) {
      println('Download OpenTelemetry agent')
      new URL('https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v1.6.2/opentelemetry-javaagent-all.jar')
              .withInputStream{ i -> opentelemetryAgent.withOutputStream{ it << i }}
    }
    lockFile.delete()
  }
}

jib {
  from {
    image = 'azul/zulu-openjdk-alpine:15-jre'
  }
  to {
    image = "${docker_registry}/microservice-kubernetes-cluster/${imageName}"
    auth {
      username = "${docker_registry_username}"
      password = "${docker_registry_password}"
    }
    tags = ["${gitHash}", 'latest']
  }
  container {
    jvmFlags = ['-Dotel.traces.exporter=jaeger',
                '-Dotel.exporter.jaeger.endpoint=http://jaeger-collector.istio-system.svc.cluster.local:14250',
                '-Dotel.metrics.exporter=none',
                '-Dotel.resource.attributes=service.name=' + project.description,
                '-Dotel.javaagent.exclude-classes=org.springframework.boot.actuate.endpoint.*',
                '-javaagent:/app/opentelemetry-javaagent-all.jar']
  }
  extraDirectories {
    paths {
      path {
        from = file('../agent')
        into = '/app'
      }
    }
  }
}

tasks.jib.dependsOn tasks.downloadOpentelemetryAgent